package com.odsaprojects.prod.entities;
// Generated 07-feb-2018 21:45:12 by Hibernate Tools 5.1.4.Final

//import java.util.HashSet;
//import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.Id;
import javax.persistence.JoinTable;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToMany;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

/**
 * Directores generated by hbm2java
 */
@Entity
@Table(name = "directores")
@NamedQueries({ @NamedQuery(name = "Directores.findAll", query = "SELECT d FROM Directores d INNER JOIN d.usuarios u "
		+ "WHERE u.id = :idUsuario AND d.estado = 1"),
	@NamedQuery(name = "Directores.findByCedula", query = "SELECT d FROM Directores d INNER JOIN d.usuarios u "
			+ "WHERE u.id = :idUsuario AND d.cedula LIKE :cedula"),
	@NamedQuery(name = "Directores.findById", query = "SELECT d FROM Directores d INNER JOIN d.usuarios u "
			+ "WHERE u.id = :idUsuario AND d.id = :id AND d.estado = 1"),
	@NamedQuery(name = "Directores.findByNoTeam", query = "SELECT d FROM Directores d INNER JOIN d.usuarios u "
			+ "WHERE u.id = :idUsuario AND d.estado = 1 AND d.direqp = 0"),
	@NamedQuery(name = "Directores.findAlmostAll", query = "SELECT d FROM Directores d INNER JOIN d.usuarios u "
			+ "WHERE u.id = :idUsuario AND d.estado = 1 AND d.id != :id"),
	@NamedQuery(name = "Directores.findByIdUsuario", query = "SELECT d FROM Directores d INNER JOIN d.usuarios u "
			+ "WHERE u.id = :idUsuario AND d.estado = 1")})
public class Directores implements Serializable {

	private static final long serialVersionUID = 1L;
	private Long id;
	private String nombres;
	private String apellidos;
	private String email;
	private String celular;
	private String cedula;
	private int estado;
	private int direqp;
	private List<Usuarios> usuarios = new ArrayList<Usuarios>();

	public Directores() {
		
	}

	public Directores(String nombres, String apellidos, String celular, String cedula, int estado, int direqp) {
		this.nombres = nombres;
		this.apellidos = apellidos;
		this.celular = celular;
		this.cedula = cedula;
		this.estado = estado;
		this.direqp = direqp;
	}

	public Directores(String nombres, String apellidos, String email, String celular, String cedula, int estado, int direqp, List<Usuarios> usuarios) {
		this.nombres = nombres;
		this.apellidos = apellidos;
		this.email = email;
		this.celular = celular;
		this.cedula = cedula;
		this.estado = estado;
		this.usuarios = usuarios;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@Column(name = "nombres", nullable = false, length = 128)
	public String getNombres() {
		return this.nombres;
	}

	public void setNombres(String nombres) {
		this.nombres = nombres;
	}

	@Column(name = "apellidos", nullable = false, length = 256)
	public String getApellidos() {
		return this.apellidos;
	}

	public void setApellidos(String apellidos) {
		this.apellidos = apellidos;
	}

	@Column(name = "email", length = 128)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "celular", nullable = false, length = 11)
	public String getCelular() {
		return this.celular;
	}

	public void setCelular(String celular) {
		this.celular = celular;
	}

	@Column(name = "cedula", nullable = false, length = 11)
	public String getCedula() {
		return this.cedula;
	}

	public void setCedula(String cedula) {
		this.cedula = cedula;
	}

	public int getEstado() {
		return estado;
	}

	public void setEstado(int estado) {
		this.estado = estado;
	}

	public int getDireqp() {
		return direqp;
	}

	public void setDireqp(int direqp) {
		this.direqp = direqp;
	}

	@ManyToMany(fetch = FetchType.EAGER)
	@JoinTable(name = "usuarios_directores", joinColumns = {
	        @JoinColumn(name = "id_directores")}, inverseJoinColumns = {
	        @JoinColumn(name = "id_usuarios")})
	public List<Usuarios> getUsuarios() {
		return usuarios;
	}

	public void setUsuarios(List<Usuarios> usuarios) {
		this.usuarios = usuarios;
	}
	
	public void addUsuarios(Usuarios user)
    {
        this.usuarios.add(user);
    }

}
